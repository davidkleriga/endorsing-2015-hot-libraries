{
  "name": "gulp-type",
  "version": "0.3.0",
  "description": "A typescript compiler for gulp with incremental compilation support.",
  "homepage": "https://github.com/ivogabe/gulp-type",
  "bugs": {
    "url": "https://github.com/ivogabe/gulp-type/issues"
  },
  "license": "MIT",
  "keywords": [
    "typescript",
    "gulpplugin",
    "incremental compilation"
  ],
  "author": {
    "name": "Ivo Gabe de Wolff",
    "url": "http://ivogabe.com/"
  },
  "main": "release/main.js",
  "dependencies": {
    "gulp-util": "~3.0.1",
    "typescript-api": "1.0.0",
    "vinyl-sourcemaps-apply": "0.1.1"
  },
  "devDependencies": {
    "gulp": "~3.8.7",
    "rimraf": "~2.2.8",
    "gulp-sourcemaps": "~1.1.4",
    "gulp-concat-sourcemap": "~1.3.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ivogabe/gulp-type.git"
  },
  "readme": "gulp-type\n=========\nA gulp plugin that compiles TypeScript files.\n\nFeatures\n--------\n- Incremental compilation (so faster builds)\n- Error reporting\n- Different output streams for .js, .d.ts files.\n- Support for sourcemaps using gulp-sourcemaps\n- Not just a wrapper around the ```tsc``` command, but a plugin that uses the TypeScript API.\n\nHow to install\n--------------\n```\nnpm install gulp-type\n```\n\nEasy usage\n----------\n```\nvar ts = require('gulp-type');\n[...]\nvar t sResult = [...].pipe(ts(options));\ntsResult.dts.pipe(...)\ntsResult.js.pipe(...)\n```\nExample gulpfile:\n```\nvar ts = require('gulp-type');\ngulp.task('scripts', function() {\n\tvar tsResult = gulp.src('lib/*.ts')\n\t\t\t\t\t   .pipe(ts({\n\t\t\t\t\t\t   declarationFiles: true,\n\t\t\t\t\t\t   noExternalResolve: true\n\t\t\t\t\t   }));\n\t\n\ttsResult.dts.pipe(gulp.dest('release/definitions'));\n\treturn tsResult.js.pipe(gulp.dest('release/js'));\n});\n```\n\nIncremental compilation\n-----------------------\nInstead of calling ```ts(options)```, you can create a project first, and then call ```ts(project)```. An example:\n```\nvar ts = require('gulp-type');\n\nvar tsProject = ts.createProject({\n\tdeclarationFiles: true,\n\tnoExternalResolve: true\n});\n\ngulp.task('scripts', function() {\n\tvar tsResult = gulp.src('lib/*.ts')\n\t\t\t\t\t   .pipe(ts(tsProject));\n\t\n\ttsResult.dts.pipe(gulp.dest('release/definitions'));\n\treturn tsResult.js.pipe(gulp.dest('release/js'));\n});\ngulp.task('watch', ['scripts'], function() {\n    gulp.watch('lib/*.ts', ['scripts']);\n});\n```\nWhen you run ```gulp watch```, the source will be compiled as usual. Then, when you make a change and save the file, your TypeScript files will be compiled in about half the time.\n\nMake sure you create the project outside of a task! Otherwise it won't work.\n\nOptions\n-------\n- ```removeComments``` (boolean) - Do not emit comments to output.\n- ```noImplicitAny``` (boolean) - Warn on expressions and declarations with an implied 'any' type.\n- ```noLib``` (boolean) - Don't include the default lib (with definitions for - Array, Date etc)\n- ```target``` (string) - Specify ECMAScript target version: 'ES3' (default), or 'ES5'.\n- ```module``` (string) - Specify module code generation: 'commonjs' or 'amd'\n- ```sourceRoot``` (string) - Specifies the location where debugger should locate TypeScript files instead of source locations.\n- ```declarationFiles``` (boolean) - Generates corresponding .d.ts files.\n- ```noExternalResolve``` (boolean) - Do not resolve files that are not in the input. Explanation below.\n- ```sortOutput``` (boolean) - Sort output files. Usefull if you want to concatenate files (see below).\n\nResolving files\n---------------\nBy default, gulp-type will try to resolve the files you require and reference. These files are parsed, but not emitted (so you will not see them in the output stream).\n\nIf you set the option ```noExternalResolve``` to true, gulp-type will not resolve all the requires and references. It assumes that all the necessary files are in the input stream. For example, if you have your ```.ts``` files in the ```lib``` folder, and the ```.d.ts``` files in the ```definitions``` folder, you must use ```gulp.src(['lib/**.ts', 'definitions/**.ts'])``` instead of ```gulp.src(['lib/**.ts'])``` in your gulpfile if you use the option ```noExternalResolve```.\n\nAdvantage of ```noExternalResolve```: faster compilation.\nDisadvantage of ```noExternalResolve```: won't work when you forgot some input files.\nAdvice: turn it on, and make sure you list all the input files.\n\nFiles that are resolved when ```noExternalResolve``` is off, won't be pushed to the output stream.\n\nConcatenate files\n------------\nThe ```tsc``` command has the ability to concatenate using the ```--out``` parameter. ```gulp-type``` doesn't have that, because you should use the ```gulp-concat``` plugin for that, or - if you want sourcemaps - ```gulp-concat-sourcemaps```.\n\nThe ```tsc``` command sorts the files using the ```<reference>``` tags. ```gulp-type``` does this when you enable the ```sortOutput``` option.\n\nSource maps\n----------\nSource maps have changed a bit in version 0.2.0. Here's an example gulpfile:\n```\nvar ts = require('gulp-type');\nvar concat = require('gulp-concat-sourcemap');\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.task('scripts', function() {\n\tvar tsResult = gulp.src('lib/*.ts')\n\t\t\t\t\t   .pipe(sourcemaps.init()) // This means sourcemaps will be generated\n\t\t\t\t\t   .pipe(ts({\n\t\t\t\t\t\t   sortOutput: true,\n\t\t\t\t\t\t   // ...\n\t\t\t\t\t   }));\n\t\n\treturn tsResult.js\n\t\t\t\t.pipe(concat('output.js')) // You can use other plugins that also support gulp-sourcemaps\n\t\t\t\t.pipe(sourcemaps.write()) // Now the sourcemaps are added to the .js file\n\t\t\t\t.pipe(gulp.dest('release/js'));\n});\n```\nFor more information, see [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps).\n\nHow to build\n------------\nFirst you have to install gulp using ```npm install gulp -g```, if you haven't done already. Then you must install the npm dependencies, using ```npm install```.\n\nThe plugin uses itself to compile. There are 2 build directories, ```release``` and ```release-2```. ```release``` must always contain a working build. ```release-2``` contains the last build. When you run ```gulp compile```, the build will be saved in the ```release-2``` directory. ```gulp test``` will compile the source to ```release-2```, and then it will run some tests. If these tests give no errors, you can run ```gulp release```. The contents from ```release-2``` will be copied to ```release```.\n",
  "readmeFilename": "readme.md",
  "_id": "gulp-type@0.3.0",
  "_shasum": "91382a98a19ab6fad931b4b5c5b098668f4f06d7",
  "_from": "gulp-type@",
  "_resolved": "https://registry.npmjs.org/gulp-type/-/gulp-type-0.3.0.tgz"
}
