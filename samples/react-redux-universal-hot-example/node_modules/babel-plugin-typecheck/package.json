{
  "name": "babel-plugin-typecheck",
  "version": "1.2.0",
  "description": "Transforms flow type annotations into runtime type checks.",
  "main": "lib/index.js",
  "scripts": {
    "build": "babel -d ./lib ./src",
    "prepublish": "npm run build",
    "pretest": "npm run build",
    "test": "mocha",
    "watch": "mocha --watch"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/codemix/babel-plugin-typecheck"
  },
  "keywords": [
    "babel",
    "babel-plugin",
    "types",
    "typing",
    "typecheck",
    "type check",
    "flow"
  ],
  "author": {
    "name": "Charles Pick",
    "email": "charles@codemix.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/codemix/babel-plugin-typecheck/issues"
  },
  "homepage": "https://github.com/codemix/babel-plugin-typecheck",
  "devDependencies": {
    "mocha": "^2.2.4",
    "should": "^6.0.1",
    "babel": "^5.6.0"
  },
  "readme": "# Babel Typecheck\n\nThis is a [Babel](https://babeljs.io/) plugin for static and runtime type checking using [flow type](http://flowtype.org/) annotations.\n\n[![Build Status](https://travis-ci.org/codemix/babel-plugin-typecheck.svg)](https://travis-ci.org/codemix/babel-plugin-typecheck)\n\n# What?\n\nTurns code like this:\n```js\nfunction sendMessage (to: User, message: string): boolean {\n  return socket.send(to, message);\n}\n```\ninto code like this:\n```js\nfunction sendMessage(to, message) {\n  var _socket$send;\n\n  if (!(to instanceof User)) throw new TypeError(\"Value of argument 'to' violates contract.\");\n  if (typeof message !== \"string\") throw new TypeError(\"Value of argument 'message' violates contract.\");\n  _socket$send = socket.send(to, message);\n  if (typeof _socket$send !== \"boolean\") throw new TypeError(\"Function 'sendMessage' return value violates contract.\");\n  return _socket$send;\n}\n```\n\nAnd guards against some silly mistakes, for example compiling the following code will raise a `SyntaxError`, because the function\ncan return the wrong type.\n\n```js\nfunction foo (): boolean {\n  if (Math.random() > 0.5) {\n    return \"yes\"; // <-- SyntaxError - string is not boolean\n  }\n  else {\n    return false;\n  }\n}\n\nfunction bar (input: string = 123): string { // <-- SyntaxError: default value is not string\n  return input + \"456\";\n}\n```\n\nIn cases where typecheck can statically verify that the return value is of the correct type, no type checks will be inserted, for instance:\n```js\nfunction bar (): string|Object {\n  if (Math.random() > 0.5) {\n    return \"yes\";\n  }\n  else {\n    return {\n      message: \"no\"\n    };\n  }\n}\n```\nwill produce no type checks at all, because we can trivially tell that the function can only return one of the two permitted types.\nThis is also true for simple cases like:\n```js\nfunction createUser (): User {\n  return new User(); // <-- no typecheck required\n}\n```\nThis is currently quite limited though, as the plugin can only statically infer the types of literals and very simple expressions, it can't (yet) statically verify e.g. the result of a function call. In those cases a runtime type check is required:\n```js\nfunction createUser (): User {\n  return User.create(); // <-- produces runtime typecheck\n}\n```\n\n\n\n# Installation\n\nFirst, install via [npm](https://npmjs.org/package/babel-plugin-typecheck).\n```sh\nnpm install --save-dev babel-plugin-typecheck\n```\nThen, in your babel configuration (usually in your `.babelrc` file), add `\"typecheck\"` to your list of plugins:\n```json\n{\n  \"plugins\": [\"typecheck\"]\n}\n```\n\n\n# License\n\nPublished by [codemix](http://codemix.com/) under a permissive MIT License, see [LICENSE.md](./LICENSE.md).\n\n",
  "readmeFilename": "README.md",
  "_id": "babel-plugin-typecheck@1.2.0",
  "_shasum": "c9eacb04cc15c8e93e1e9a860d80763a95f91c16",
  "_from": "babel-plugin-typecheck@1.2.0",
  "_resolved": "https://registry.npmjs.org/babel-plugin-typecheck/-/babel-plugin-typecheck-1.2.0.tgz"
}
