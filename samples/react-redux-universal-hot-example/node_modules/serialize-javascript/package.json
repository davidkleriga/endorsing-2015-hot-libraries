{
  "name": "serialize-javascript",
  "version": "1.1.1",
  "description": "Serialize JavaScript to a superset of JSON that includes regular expressions and functions.",
  "main": "index.js",
  "scripts": {
    "benchmark": "node test/benchmark/serialize.js",
    "test": "istanbul cover -- ./node_modules/mocha/bin/_mocha test/unit/ --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yahoo/serialize-javascript.git"
  },
  "keywords": [
    "serialize",
    "serialization",
    "javascript",
    "js",
    "json"
  ],
  "author": {
    "name": "Eric Ferraiuolo",
    "email": "edf@ericf.me"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/yahoo/serialize-javascript/issues"
  },
  "homepage": "https://github.com/yahoo/serialize-javascript",
  "devDependencies": {
    "benchmark": "^1.0.0",
    "chai": "^1.9.1",
    "istanbul": "^0.3.2",
    "mocha": "^1.21.4",
    "xunit-file": "0.0.5"
  },
  "readme": "Serialize JavaScript\n====================\n\nSerialize JavaScript to a _superset_ of JSON that includes regular expressions and functions.\n\n[![npm Version][npm-badge]][npm]\n[![Dependency Status][david-badge]][david]\n[![Build Status][travis-badge]][travis]\n\n## Overview\n\nThe code in this package began its life as an internal module to [express-state][]. To expand its usefulness, it now lives as `serialize-javascript` â€” an independent package on npm.\n\nYou're probably wondering: **What about `JSON.stringify()`!?** We've found that sometimes we need to serialize JavaScript **functions** and **regexps**. A great example is a web app that uses client-side URL routing where the route definitions are regexps that need to be shared from the server to the client.\n\nThe string returned from this package's single export function is literal JavaScript which can be saved to a `.js` file, or be embedded into an HTML document by making the content of a `<script>` element. **HTML charaters and JavaScript line terminators are escaped automatically.**\n\n## Installation\n\nInstall using npm:\n\n```shell\n$ npm install serialize-javascript\n```\n\n## Usage\n\n```js\nvar serialize = require('serialize-javascript');\n\nserialize({\n    str  : 'string',\n    num  : 0,\n    obj  : {foo: 'foo'},\n    arr  : [1, 2, 3],\n    bool : true,\n    nil  : null,\n    undef: undefined,\n\n    fn: function echo(arg) { return arg; },\n    re: /([^\\s]+)/g\n});\n```\n\nThe above will produce the following string output:\n\n```\n{\n  \"str\": \"string\",\n  \"num\": 0,\n  \"obj\": {\n    \"foo\": \"foo\"\n  },\n  \"arr\": [\n    1,\n    2,\n    3\n  ],\n  \"bool\": true,\n  \"nil\": null,\n  \"fn\": function echo(arg) { return arg; },\n  \"re\": /([^\\s]+)/g\n}\n```\n\n### Automatic Escaping of HTML Characters\n\nA primary feature of this package is to serialize code to a string of literal JavaScript which can be embedded in an HTML document by adding it as the contents of the `<script>` element. In order to make this safe, HTML characters and JavaScript line terminators  are escaped automatically.\n\n```js\nserialize({\n    haxorXSS: '</script>'\n});\n```\n\nThe above will produce the following string, HTML-escaped output which is safe to put into an HTML document as it will not cause the inline script element to terminate:\n\n```\n{\n  \"haxorXSS\": \"\\u003C\\u002Fscript\\u003E\"\n}\n```\n\n## License\n\nThis software is free to use under the Yahoo! Inc. BSD license.\nSee the [LICENSE file][LICENSE] for license text and copyright information.\n\n\n[npm]: https://www.npmjs.org/package/serialize-javascript\n[npm-badge]: https://img.shields.io/npm/v/serialize-javascript.svg?style=flat-square\n[david]: https://david-dm.org/yahoo/serialize-javascript\n[david-badge]: https://img.shields.io/david/yahoo/serialize-javascript.svg?style=flat-square\n[travis]: https://travis-ci.org/yahoo/serialize-javascript\n[travis-badge]: https://img.shields.io/travis/yahoo/serialize-javascript.svg?style=flat-square\n[express-state]: https://github.com/yahoo/express-state\n[LICENSE]: https://github.com/yahoo/serialize-javascript/blob/master/LICENSE\n",
  "readmeFilename": "README.md",
  "_id": "serialize-javascript@1.1.1",
  "_shasum": "416e4bb3afaf25887a3bb5da4b18365f67873714",
  "_from": "serialize-javascript@^1.0.0",
  "_resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-1.1.1.tgz"
}
