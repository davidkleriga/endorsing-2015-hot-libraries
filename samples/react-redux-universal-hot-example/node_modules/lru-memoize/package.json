{
  "name": "lru-memoize",
  "version": "1.0.0",
  "description": "A utility to provide lru memoization for any js function",
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/erikras/lru-memoize"
  },
  "scripts": {
    "browser": "scripts/browser",
    "build": "scripts/build",
    "clean": "scripts/clean",
    "lint": "scripts/lint",
    "prepublish": "scripts/prepublish",
    "test": "scripts/test"
  },
  "keywords": [
    "memoize",
    "cache",
    "caching",
    "es7",
    "decorator"
  ],
  "author": {
    "name": "Erik Rasmussen",
    "email": "rasmussenerik@gmail.com",
    "url": "http://github.com/erikras"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/erikras/lru-memoize/issues"
  },
  "homepage": "https://github.com/erikras/lru-memoize",
  "devDependencies": {
    "babel": "^5.8.19",
    "babel-core": "^5.8.19",
    "babel-eslint": "^4.0.5",
    "babel-loader": "^5.3.2",
    "eslint": "^0.24.1",
    "eslint-config-airbnb": "0.0.6",
    "expect": "^1.6.0",
    "mocha": "^2.2.5",
    "rifraf": "^2.0.2",
    "rimraf": "^2.4.2",
    "webpack": "^1.10.5"
  },
  "readme": "#lru-memoize\n\n[![NPM Version](https://img.shields.io/npm/v/lru-memoize.svg?style=flat-square)](https://www.npmjs.com/package/lru-memoize) \n[![NPM Downloads](https://img.shields.io/npm/dm/lru-memoize.svg?style=flat-square)](https://www.npmjs.com/package/lru-memoize)\n[![Build Status](https://img.shields.io/travis/erikras/lru-memoize/master.svg?style=flat-square)](https://travis-ci.org/erikras/lru-memoize)\n\n`lru-memoize` is a utility to provide simple memoization for any pure javascript function, using an [LRU cache](https://en.wikipedia.org/wiki/Cache_algorithms) that prioritizes the most recently accessed values, and discards the \"least recently used\" (LRU) items when the size limit is reached. _If your function has side effects or relies on some external state to generate its result, it should not be memoized._\n\n## Installation\n\n```\nnpm install --save lru-memoize\n```\n\n## Usage\n\nLet's look at an example where we want to memoize a function that multiplies three numbers together, and we want to keep the last ten `arguments -> value` mappings in memory.\n\n### ES5\n\n```javascript\nvar memoize = require('lru-memoize');\n\nvar multiply = function(a, b, c) {\n  return a * b * c;\n}\n\nmultiply = memoize(10)(multiply);\n\nmodule.exports = multiply;\n```\n\n### ES6\n\n```javascript\nimport memoize from 'lru-memoize';\n\nlet multiply = (a, b, c) => a * b * c;\n\nmultiply = memoize(10)(multiply);\n\nexport default multiply;\n```\n\n## API\n\n### `memoize(limit:Integer?, equals:Function?, deepObjects:Boolean?)`\n\nReturns `(Function) => Function`.\n\n##### -`limit` : Integer [optional]\n\n> The number of `arguments -> value` mappings to keep in memory. Defaults to `1`.\n\n##### -`equals` : Function [optional]\n\n> A function to compare two values for equality. Defaults to `===`.\n\n##### -`deepObjects` : Boolean [optional]\n\n> Whether or not to perform a deep equals on Object values. Defaults to `false`.\n\n",
  "readmeFilename": "README.md",
  "_id": "lru-memoize@1.0.0",
  "_shasum": "6735dd48a0ba419fd1fb04d6463f714abaa3cdad",
  "_from": "lru-memoize@1.0.0",
  "_resolved": "https://registry.npmjs.org/lru-memoize/-/lru-memoize-1.0.0.tgz"
}
